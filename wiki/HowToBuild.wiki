#summary This page explains how to build the application.
#labels Phase-Implementation
#sidebar MainSideBar

= IMPORTANT =
For any question on how to build *PLEASE* join the [http://groups.google.com/group/csipsimple-dev/ development group]
Also, if you build CSipSimple, you should first read the [Licensing] wiki page

= Introduction =
The application has two distinct parts : 
 * The pjsip dynamic library part that produce a .so (to be more precise a .so by android target).
 * The java application that produce a .apk (and can be installed on your android device).

Both java and native part must have the same level of code if you want the app to run. So it's better to build both parts and follow the complete process.

If you are a java developer and you are not interested in building the sip stack, you can directly go to the *Build the android application* section.

Some very important note : *CSipSimple is released under GPL license*. 
Be really aware about what does that mean before developing. Read [Licensing] wiki page. 
So if you plan to improve CSipSimple and redistribute it, you *MUST* release your source code. As we (CSipSimple developers) are open to any contribution, I'd advise you to directly contribute the CSipSimple project. All contributions are welcome !!!

<wiki:toc max_depth="2" />

= System and Software Requirements =
== For Linux ==
You'll need following package _you may need to adapt depending to your distribution packages names_
{{{ 
subversion git quilt unzip wget swig2.0 python
}}} 
You also have to install the android NDK and the android SDK.
I do not details here how to install android NDK and SDK. Please read Android documentations about that :
[http://developer.android.com/ndk/ndk/index.html Android NDK doc]
[http://developer.android.com/sdk/installing.html Android SDK doc]
To install correctly the android NDK, please add the NDK to your path. I usually recommend to add these lines to your .bashrc :
{{{
export ANDROID_NDK=/_path_to/android-ndk-linux/
export ANDROID_SDK=/_path_to/android-sdk-linux/
export PATH=$PATH:$ANDROID_SDK/tools:$ANDROID_SDK/platform-tools:$ANDROID_NDK
}}}
Anyway the naming of ANDROID_NDK export is important in the build of one part of the application. You can also do that only at build time, but if you use to develop for android, it's a good idea to do that.

== For MacOSX ==
It's almost the same as for Linux. May be harder to find packages above. If you want to contribute in details to this section, feel free to contribute on the developer mailing list infos about how to get the environment. 

== For Windows ==
I don't not explain how to build for Windows because if you really want to develop you probably don't and shouldn't use Windows. 
However it should be possible to build it for Windows too. To do so, you must understand Makefile syntax and have a look on commands to run to build the project. It's most about checkouting other projects using git, getting zip files from elsewhere, applying patches, and generating a swig interface. Maybe using cygwin it's easier. But if I where you I would rather install a virtual machine with some beginner linux distro (such as Ubuntu or Fedora). 

= Checkout source code =
We assume here you are in your folder where you put dev with a shell.

_Start with a checkout of source code_
{{{
svn checkout http://csipsimple.googlecode.com/svn/trunk/CSipSimple CSipSimple
}}}
It will create a folder CSipSimple where source code from CSipSimple and all svn dependancies has been gathered.

_Go into source folder_
{{{
cd CSipSimple
}}}

_Launch make to build the native part of the library and dependancies_
{{{
make
}}}
_Note that you can use make -j4 to make things go faster if your computer allow that_

If you get a problem at this point, it could be because there is a missing package on your system install. Since at this point it will do git, swig2.0, wget, unzip, quilt... there is chance one of these apps is missing. If so, try to get that installed on your system first. About swig you may have to build and install it by yourself because version 2.0 is recent.

If everything goes well, congrats, you have created the native libraries for CSipSimple (it will also produce native libs for plugins apps).


You can now open the project with Eclipse or your preferred java IDE that is able to build a regular android application. On eclipse just import the project as an Android project (create project > android > from source).

When you get an update from CSipSimple svn, you should always make the native library. To do so, as there is potential update from external projects you should do :
{{{
make update; make
}}}

If you want to automate the build of the native part as well as the build of the android project, you can do that by installing CDT on eclipse and then on the android project do : New Project->Other->C++->Convert to C++ and tells it's a makefile project.

You should now be able to launch the application as an Android application.



----
= Old way - for pjsip-1.x not anymore supported for CSipSimple =

First thing to do :
Create a new directory for the project.

= Build the pjsip library for android =

== Get the NDK and the source ==
I have not committed into the svn the build toolchain for android. 
The one distributed in CSipSimple SVN is a mix between Crystax NDK and a NDK that allow to build for armv4t devices (thx to H. Manson).
(For reference [http://www.crystax.net/android/ndk-r4.php crystax NDK] and [http://code.google.com/p/android-on-freerunner/issues/detail?id=142 android armv4t NDK].

You can now also use the official android ndk r5b since it support C++ (if you try to build with opensl-ES you must use it).

 * First of all get the ndk and unzip
EITHER : 


 ** Official android NDK:
{{{
wget http://dl.google.com/android/ndk/android-ndk-r6-linux-x86.tar.bz2
tar -xvf android-ndk-r6-linux-x86.tar.bz2
mv android-ndk-r6 pjsip_android
cd pjsip_android/
# Get only the relevant part of the svn
svn checkout http://csipsimple.googlecode.com/svn/trunk/pjsip_android/apps apps
cd ../../
}}}


* FOLLOWING METHOD SHOULD NOT BE USED, UNLESS YOU KNOW WHY YOU WANTS TO USE IT*
 ** Crystax NDK :
{{{
wget http://www.crystax.net/data/android-ndk-r4-linux-x86-crystax-4.tar.bz2
tar -xvf android-ndk-r4-linux-x86-crystax-4.tar.bz2
rm android-ndk-r4-linux-x86-crystax-4.tar.bz2
# Checkout the pjsip part of the project
svn checkout http://csipsimple.googlecode.com/svn/trunk/pjsip_android pjsip_android
# Now we have to add the ndk toolchains into the pjsip_android project ndk.
cp -r android-ndk-r4-crystax/build/prebuilt pjsip_android/build/
}}}
_ Note : You can now delete the android-ndk-r4-crystax folder _

 ** Armv4t NDK :
{{{
# Checkout the pjsip part of the project
svn checkout http://csipsimple.googlecode.com/svn/trunk/pjsip_android pjsip_android
cd pjsip_android/build
# Get the NDK prebuilt
wget http://nightlies.csipsimple.com/tools/prebuilt.tar.gz
tar -xvf prebuilt.tar.gz
rm prebuilt.tar.gz
cd ../../
}}}


_Note : the source is also available in a [https://code.launchpad.net/csipsimple/+branches?field.lifecycle=DEVELOPMENT&field.lifecycle-empty-marker=1&field.sort_by=by+owner+name&field.sort_by-empty-marker=1 Bazar mirror] 

== Build the library ==

 * Go into the pjsip_android directory:
{{{
cd pjsip_android
}}}

 * Launch a make (but it will generate only one target lib)
{{{

make APP=pjsip
#if you want to build for target android 2.3 (for OpenSL-ES support type or webRTC support ) :
# WARNING : default of webRTC is now activated !! so you should consider use this line instead :  

make APP=pjsip TARGET_PLATFORM=android-9
}}}

Congratulation you've just build the dynamic library.
You can find your build under 

{{{
../CSipSimple/libs/armeabi & armeabi-v7a
}}}

== Customize your builds ==

pjsip_android can be built with several build flags to activate/deactivate some features.
The file that allow you to say what you'd like to build is in :
pjsip_android/apps/pjsip/Application.mk

You can here choose :
 * The output dir of your libs with APP_PROJECT_PATH := ....your_directory.....
 * The target abi you'd like to build with APP_ABI depending the NDK you choose available are : armeabi, armeabi-v7a, armv4t. (You can combine eabi and eabi-v7a targets separating with space. armv4t that must be built alone).
 * Codecs you want to build with MY_USE_G729|SILK|SPEEX|G722|GSM|CODEC2 := 1 (if you want to enable it) 0 (if you don't). 
SPEEX codec should always be 1 if you build for armv7a cause it is required for AEC.
 * TLS/ZRTP support with MY_USE_TLS := 1
 * Android audio dev backend with MY_ANDROID_DEV := 1 (for a backend that relies on java API and is compatible from android 1.5) 2 (for the new OpenSL-ES backend. it uses the new android native audio API and require to build for target android-9 and will be compatible only with devices that has android 2.3 or upper). 
In the future we plan to make it more modular so that it will be possible to make builds that can rely on java or/and opensl api.
Also when OpenSL-ES api will allow it, it will be possible to have direct encoding capabilities (amr / gsm) from the device. (For now it's not allowed by OpenSL-ES api...)


= Build the android application =
From the android sdk point of view, the application is a standard android application.

So you can use eclipse.
Checkout the csipsimple directory (under trunk) from the source. (You can use [http://subclipse.tigris.org/ Subclipse] to checkout directly into Eclipse).

 * If you have build the pjsip library, copy the .so generated by the build in the directories : `libs/armeabi/libpjsipjni.so` and `libs/armeabi-v7a/libpjsipjni.so` of the android project.
 * Alternatively, you can use *nightly builds* to extract from apk the .so files and then put the files in the correct directory. In this case you *MUST* be sure that the nightly build version is the same than your SVN version !!!

The project has to be imported as an android project (with sdk 2.3).<br/>
The project is compatible with android 1.5 but different layout support is available only after 1.6 and some features of manifest file after 2.3. 

Then you can launch the project using run (and choose your remote device or a virtual device _(emulator)_).

If you are running something different than a Linux or MacOS or with a platform without svn properly configured, you will experiment problems with the auto svn tagger tool for android manifest. 
In this case remove the .externalTools dir from the CSipSimple project and revert the Manifest file from the version available on the repository.

It's deeply advised to not make audio tests using the emulator cause the audio driver of the qemu is really bad and leads to pledging CPU of the emulator.

If you experiments problems at first run use _Project > Clean ..._