#summary This page explains how to build the application.
#labels Phase-Implementation
#sidebar MainSideBar

= IMPORTANT =
For any question on how to build *PLEASE* join the [http://groups.google.com/group/csipsimple-dev/ development group]
Also, if you build CSipSimple, you should first read the [Licensing] wiki page

= Introduction =
The application has two distinct parts : 
 * The pjsip dynamic library part that produce a .so (to be more precise a .so by android target).
 * The java application that produce a .apk (and can be installed on your android device).

Both java and native part must have the same level of code if you want the app to run. So it's better to build both parts and follow the complete process.

If you are a java developer and you are not interested in building the sip stack, you can directly go to the *Build the android application* section.

Some very important note : *CSipSimple is released under GPL license*. 
Be really aware about what does that mean before developing. Read [Licensing] wiki page. 

So if you plan to improve CSipSimple and redistribute it, you *MUST* release your source code. As we (CSipSimple developers) are open to any contribution, I'd advise you to directly contribute the CSipSimple project. All contributions are welcome !!!

<wiki:toc max_depth="2" />

= System and Software Requirements =
== For Linux ==
You'll need following package _you may need to adapt depending to your distribution packages names_
{{{ 
subversion git quilt unzip wget swig2.0 python make yasm
}}} 
You also have to install the android NDK and the android SDK.
I do not details here how to install android NDK and SDK. Please read Android documentations about that :
 * [http://developer.android.com/sdk/ndk/index.html Android NDK doc]
 * [http://developer.android.com/sdk/installing.html Android SDK doc]
To install correctly the android NDK, please add the NDK to your path. I usually recommend to add these lines to your .bashrc :
{{{
export ANDROID_NDK=/_path_to/android-ndk-linux/
export ANDROID_SDK=/_path_to/android-sdk-linux/
export PATH=$PATH:$ANDROID_SDK/tools:$ANDROID_SDK/platform-tools:$ANDROID_NDK
}}}
Anyway the naming of ANDROID_NDK export is important in the build of one part of the application. You can also do that only at build time, but if you use to develop for android, it's a good idea to do that.

Don't forget to install SDK and NDK dependencies as well. For example, on ubuntu 64bits system you will need `ia32-libs` for both NDK and SDK.

== For MacOSX ==
_Thx to Benjamin and Magnus for the contrib on these instructions_

For main instructions it's almost the same as for Linux. 

Packages are a little bit more complicated to get however. The two more difficult to get are quilt and swig2.0.

DUE TO A BUG IN MACPORT with quilt 0.6 -- DON'T USE THE FOLLOWING.

_To install quilt you should install MacPorts first (http://www.macports.org). 
[http://www.macports.org/install.php Installation instructions]_

_If you work behind a proxy follow these instructions additionally [http://www.oconnoat.com/blog/2009/03/18/macports-through-a-proxy/ MacPorts behind proxy]_

_And then install quilt using :_
{{{
sudo port selfupdate
sudo port install quilt
}}} 

*Instead build it from source*

Download quilt from latest source available here : http://download.savannah.gnu.org/releases/quilt/
And then execute
{{{
./configure # optionally add prefix here to be able to install in your env
make
make install # optionally do that in sudo if target is read only for the current user
}}}

To install swig 2.0 : download from source available here : http://www.swig.org/download.html
And then execute
{{{
./configure # optionally add prefix here to be able to install in your env
make
make install # optionally do that in sudo if target is read only for the current user
}}}
Finally, since csipsimple make file has some crappy hard coded link to swig tool for now, you have to add a symbolic link to allow your system to recognize swig2.0 to be the same than swig. The faster way is probably to make a symlink:
{{{
sudo ln -s <path to swig> /opt/local/bin/swig2.0
}}}

Other packages (subversion git unzip wget python make) should be easier to install but are also required on Mac.

Continue instructions of Linux build. It should go the same way once packages are installed.

== For Windows ==
I don't not explain how to build for Windows because if you really want to develop you probably don't and shouldn't use Windows. 
However it should be possible to build it for Windows too. To do so, you must understand Makefile syntax and have a look on commands to run to build the project. It's most about checkouting other projects using git, getting zip files from elsewhere, applying patches, and generating a swig interface. Maybe using cygwin it's easier. But if I where you I would rather install a virtual machine with some beginner linux distro (such as Ubuntu or Fedora). 

= Checkout source code =
We assume here you are in your folder where you put dev with a shell.

_Start with a checkout of source code_
{{{
# Checkout CSipSimple
svn checkout http://csipsimple.googlecode.com/svn/trunk/CSipSimple CSipSimple
# Checkout ActionBarSherlock on github
svn checkout http://csipsimple.googlecode.com/svn/trunk/ActionBarSherlock ActionBarSherlock
}}}
It will create a folder CSipSimple where source code from CSipSimple and all svn dependancies has been gathered.

CSipSimple also now depends on the ActionBarSherlock library. 
So from the second line it also checkout the ActionBarSherlock fork for current csipsimple version. 
When you'll import to Eclipse (if you do), you have to import !ActionBarSherlock folder as well.

= Build native library =
_Go into source folder_
{{{
cd CSipSimple
}}}

_Launch make to build the native part of the library and dependancies_
{{{
make
}}}
_Note that you can use make -j4 to make things go faster if your computer allow that_

If you get a problem at this point, it could be because there is a missing package on your system install. Since at this point it will do git, swig2.0, wget, unzip, quilt... there is chance one of these apps is missing. If so, try to get that installed on your system first. About swig you may have to build and install it by yourself because version 2.0 is recent.

If everything goes well, congrats, you have created the native libraries for CSipSimple (it will also produce native libs for plugins apps).

= Build apk =
There is several ways to build the apk once the native library is built. You can either use an IDE that integrates android development toolchains (described in details for Eclipse) or you can use Ant (for command line environments).

== Setup/import application in your IDE _(Optional)_ ==
You can now open the projects with Eclipse or your preferred java IDE that is able to build a regular android application. 

On eclipse just retrieve the projects as an Android projects (create project > android > from source). 
Then when ADT plugin will ask you which android version you'd like to link on, you should check the "project.properties" file of each project you are importing (do that both for CSipSimple and !ActionBarSherlock). You can have a look to online files here :
[http://code.google.com/p/csipsimple/source/browse/trunk/CSipSimple/project.properties CSipSimple project.properties] and [http://code.google.com/p/csipsimple/source/browse/trunk/ActionBarSherlock/project.properties ABS project.properties].

Don't be worried about the fact it's high values ! It does *not* mean that your app will not run with older android version. Actually, it will be able to run on android 1.6 ! minSdk version and targetVersion are not linked. Backward compatibility is ensured by code not by the lib you link on while building.

Finally you should have two eclipse projects "CSipSimple" and "!ActionBarSherlock". !ActionBarSherlock is a backward compatible way to use Fragments and Action Bar pattern of android newer versions.

If you encounter some problems about override of methods, ensure that your Eclipse env setup projects for "java 1.6" or upper. -You should also check that per project if necessary-


You should now be able to launch the application as an Android application.

== Using ant _(Optional)_ ==
This is particularly useful for a pure command line environment. It's used on the automatic nightly build server for example.

You have basically to follow instructions here :
[http://developer.android.com/guide/developing/projects/projects-cmdline.html]

Take care that it may modify the !AndroidManifest.xml file, so revert it if it does.

For parameters to pass, simply have a look to existing project.properties file and !AndroidManifest.xml file that are in each project you init with ant tool.


= Updates =
When you get an update from CSipSimple svn, you should always make the native library. To do so, as there is potential update from external projects you should do :
{{{
make update; make
}}}

If you want to automate the build of the native part as well as the build of the android project, you can do that by installing CDT on eclipse and then on the android project do : New Project->Other->C++->Convert to C++ and tells it's a makefile project.



----
= Build with pjsip 1.x =
OldWayToBuild wiki page gives for reference the old way to build the library on older csipsimple versions. It's not supported anymore in development process.