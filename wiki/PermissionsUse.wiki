#summary This page describe permissions used by CSipSimple and why these permissions are used
#labels Featured,Phase-Support
#sidebar MainSideBar

As security is important stuff on mobile system, Android has a permissions system. It's up to users to be really careful with what permission he grant to an application. 

You have no big fear to have with CSipSimple cause it's an opensource application and you can read the code in the Source tab here and ensure that nothing bad is done with your private datas.

But as most users may not have skills to read java and C code, this page is here to explain what permissions are used by CSipSimple and why it use these permissions.


= Permissions used by CSipSimple =

== INTERNET ==
Obviously as SIP application has to communicate with your SIP server it requires permission to access the network. 
Be careful if you have a limited 3G data plan and don't want CSipSimple to use your 3G connection to communicate with your server to left "I'm allowed to Use mobile data" deactivated.
CSipSimple may also do some network traffic when you use a wizard with balance inquiry feature (such as ippi and betamax clones). But that's done only when you go in the wizard. It also use network for the FAQ that is hosted on this website.


== RECORD_AUDIO ==
It's useful to allow remote party to hear you ;)

== MODIFY_AUDIO_SETTINGS ==
== WRITE_SETTINGS ==
It allow CSipSimple to change audio routing. For example routing to earpiece/rear speaker. It also allow CSipSimple to put the phone in silent/vibrate mode while in SIP call. If I do not your hear may explode if there is an incoming GSM call that ring !
If everything works fine, your audio settings are restore when calls end. If something goes wrong while in call, it may not restore your settings. In this case raise a but using the issue tab. And reconfigure your settings :( . Do not forget to restore wifi sleep policy that may have been changed too.

== PROCESS_OUTGOING_CALLS ==
It allow the application to integrate android when an outgoing call is made. And propose you a popup that allow you to choose between a SIP account and GSM.
If you disable the feature in CSipSimple to "Integrate dialer" it will not process outgoing calls and just leave the standard telephony application manage it.

== READ_PHONE_STATE ==
Even if not properly managed yet it will allow the application to be aware about the fact there is an ongoing/incoming GSM call and so do what should be done for your SIP calls.

== ACCESS_WIFI_STATE ==
== ACCESS_NETWORK_STATE ==
It allow the application to know about the fact you are using wifi / mobile data and so act regarding that (register/do not register, allow you to place sip calls or not).

== RECEIVE_BOOT_COMPLETED ==
With this permission the app should be able to automatically start. Don't be afraid, it does not mean that the app will be *running* in background. And by running I mean doing something : many users confuse with an app running and an active process app. Android manage a clever way your phone memory in recent android versions. As consequence an app can be listed by task managers but actually do nothing and so consume no battery. So if CSipSimple is properly configured it should not be hurting to register at autostart. It will auto stop itself (auto stop doesn't mean kill but regarding resources consumptions it is the same).

== READ_CONTACTS ==
Allow contact integration within the application. Also allow to show contact picture and ringtone when there is an incoming call.

== WRITE_CONTACTS ==
Actually not used yet. For future use : may allow to merge with contact with a buddy list stored in XCAP. Or to share presence information.


== CALL_PHONE ==
This is useful for GSM dialer integration. If call is not treat by CSipSimple it forward the request to the GSM dialer.
Also be careful, by default CSipSimple user interface allow you to use mobile calls directly from its user interface. Check the little icon on the top right ;)

== CALL_PRIVILEGED ==
For android 2.3 sip integration.

== WAKE_LOCK ==
Allow CSipSimple to acquire wake locks when in call or when setup to do so when registered.

== DISABLE_KEYGUARD ==
Allow the application to remove keyguard when the phone is in keylock mode. With this permission csipsimple is able to wakeup the phone and disable keyguard while you are in call. It should reactivate keyguard when call is finished.

== VIBRATE ==
For vibrate ringing mode and for dialer feedback.

== BLUETOOTH ==
For using bluetooth device. It's not yet fully supported but with a correct configuration (frequency to 8kHz) it should work.

== READ_LOGS ==
It is useful for the embedded issue reporting tool. CSipSimple use the standard logging system to write logs. To get back logs and send it to developers, it requires the permission to read logs. It's interesting for us to get the entire logs cause we can get some interesting logs about the audio driver of the phone for example. Or logs from network stack.

== WRITE_EXTERNAL_STORAGE ==
Used to write audio records on SDCard, to write backups and logs.

== USE_SIP ==
== CONFIGURE_SIP ==
This is mostly for internal use. CSipSimple may provide other application to control SIP calls and messages and also SIP configuration. To restrict rights of other apps to do that. There is these two rights.
Besides USE_SIP is also the permission used by the stock SIP application. As consequence for the future it will allow CSipSimple to use the stock SIP stack in addition to pjsip stack.

== RAISED_THREAD_PRIORITY ==
Probably not taken into account by most recent android versions.

= Permissions provided by CSipSimple =

CSipSimple may provide other apps a way to automatically configure your accounts or to override the calls screen or to place SIP calls.
To restrict the numbers of applications allowed to do that, it announce permission that for which other apps should have grants if they wants to use SIP service.
These permissions are :
Use SIP (for make calls and control calls) and Configure SIP for read/write access to your accounts configuration.

So be careful with the apps you grant these permissions.
By allowing an application to use some permission on android you *trust* the application. Do not *trust* anybody ;).